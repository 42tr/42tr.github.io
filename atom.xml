<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kisia</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kisia.cn/"/>
  <updated>2020-07-23T05:03:37.666Z</updated>
  <id>http://kisia.cn/</id>
  
  <author>
    <name>KsClouds</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac 使用</title>
    <link href="http://kisia.cn/2020/07/19/mac/"/>
    <id>http://kisia.cn/2020/07/19/mac/</id>
    <published>2020-07-19T05:25:30.000Z</published>
    <updated>2020-07-23T05:03:37.666Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mac使用谷歌浏览器跨域访问"><a href="#mac使用谷歌浏览器跨域访问" class="headerlink" title="mac使用谷歌浏览器跨域访问"></a>mac使用谷歌浏览器跨域访问</h3><p>创建目录(随便创建，创建后指定该目录即可)<br><code>/Users/LeoLee/Documents/MyChromeDevUserData</code><br>输入命令打开浏览器</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">open -n /Applications/Google\ Chrome.app/ --args --disable-web-security  --user-data-dir=/Users/LeoLee/Documents/MyChromeDevUserData<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mac使用谷歌浏览器跨域访问&quot;&gt;&lt;a href=&quot;#mac使用谷歌浏览器跨域访问&quot; class=&quot;headerlink&quot; title=&quot;mac使用谷歌浏览器跨域访问&quot;&gt;&lt;/a&gt;mac使用谷歌浏览器跨域访问&lt;/h3&gt;&lt;p&gt;创建目录(随便创建，创建后指定该目录即可)&lt;
      
    
    </summary>
    
    
    
      <category term="mac" scheme="http://kisia.cn/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>常用css</title>
    <link href="http://kisia.cn/2020/07/19/css/"/>
    <id>http://kisia.cn/2020/07/19/css/</id>
    <published>2020-07-19T04:47:25.000Z</published>
    <updated>2020-07-23T04:59:14.710Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算值"><a href="#计算值" class="headerlink" title="计算值"></a>计算值</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">height</span><span class="hljs-selector-pseudo">:calc(100</span>% <span class="hljs-selector-tag">-</span> 20<span class="hljs-selector-tag">px</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算值&quot;&gt;&lt;a href=&quot;#计算值&quot; class=&quot;headerlink&quot; title=&quot;计算值&quot;&gt;&lt;/a&gt;计算值&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
    
    
      <category term="css" scheme="http://kisia.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>common utils</title>
    <link href="http://kisia.cn/2020/07/16/utils/"/>
    <id>http://kisia.cn/2020/07/16/utils/</id>
    <published>2020-07-16T04:52:39.000Z</published>
    <updated>2020-07-23T05:06:10.634Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="java" scheme="http://kisia.cn/tags/java/"/>
    
      <category term="util" scheme="http://kisia.cn/tags/util/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://kisia.cn/2020/07/13/mysql/"/>
    <id>http://kisia.cn/2020/07/13/mysql/</id>
    <published>2020-07-13T06:23:07.000Z</published>
    <updated>2020-07-23T05:04:48.273Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查询数据库下所有表数据量"><a href="#查询数据库下所有表数据量" class="headerlink" title="查询数据库下所有表数据量"></a>查询数据库下所有表数据量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select table_name,table_rows from information_schema.tables where TABLE_SCHEMA &#x3D; &#39;库名&#39; order by table_rows desc;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;查询数据库下所有表数据量&quot;&gt;&lt;a href=&quot;#查询数据库下所有表数据量&quot; class=&quot;headerlink&quot; title=&quot;查询数据库下所有表数据量&quot;&gt;&lt;/a&gt;查询数据库下所有表数据量&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="http://kisia.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://kisia.cn/2020/07/06/git/"/>
    <id>http://kisia.cn/2020/07/06/git/</id>
    <published>2020-07-06T06:19:15.000Z</published>
    <updated>2020-07-23T05:02:48.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="配置-ssh-key"><a href="#配置-ssh-key" class="headerlink" title="配置 ssh-key"></a>配置 ssh-key</h3><ul><li>配置Git用户名和邮箱<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config user.name "用户名"<br>git config user.email "邮箱"<br></code></pre></td></tr></table></figure></li><li>生成 ssh-key</li></ul><p><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code></p><ul><li>上传key到github<blockquote><p>进入 github，add ssh key<br>粘贴 id_rsa.pub 内容</p></blockquote></li><li>测试是否配置成功</li></ul><p><code>ssh -T git@github.com</code></p><p>配置成功会显示<br><code>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</code></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="错误整理"><a href="#错误整理" class="headerlink" title="错误整理"></a>错误整理</h3><ul><li>RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54<blockquote><p>原因不明，配置 ssh-key 解决</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作&quot;&gt;&lt;a href=&quot;#操作&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h2&gt;&lt;h3 id=&quot;配置-ssh-key&quot;&gt;&lt;a href=&quot;#配置-ssh-key&quot; class=&quot;headerlink&quot; title=&quot;配置 ss
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://kisia.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>xml</title>
    <link href="http://kisia.cn/2020/07/04/xml/"/>
    <id>http://kisia.cn/2020/07/04/xml/</id>
    <published>2020-07-04T07:07:30.000Z</published>
    <updated>2020-07-23T05:11:38.985Z</updated>
    
    <content type="html"><![CDATA[<ol><li><![CDATA[]]>和转义字符<br>被<![CDATA[]]>这个标记所包含的内容将表示为纯文本，比如<![CDATA[<]]>表示文本内容“&lt;”。<br>　　此标记用于xml文档中，我们先来看看使用转义符的情况。我们知道，在xml中，”&lt;”、”&gt;”、”&amp;”等字符是不能直接存入的，否则xml语法检查时会报错，如果想在xml中使用这些符号，必须将其转义为实体，如”&lt;”、”&gt;”、”&amp;”，这样才能保存进xml文档。<br>　　在使用程序读取的时候，解析器会自动将这些实体转换回”&lt;”、”&gt;”、”&amp;”。举个例子：<br>　　<age> age &lt; 30 </age><br>　　上面这种写法会报错，应该这样写：<br>　　<age> age &lt; 30 </age><br>　　值得注意的是：<br>　　(1) 转义序列字符之间不能有空格；<br>　　(2) 转义序列必须以”;”结束；<br>　　(3) 单独出现的”&amp;”不会被认为是转义的开始；<br>　　(4) 区分大小写。<br>　　<br>　　在XML中，需要转义的字符有：<br>　　(1)&amp;　　　&amp;<br>　　(2)&lt;　　　&lt;<br>　　(3)&gt;　　　&gt;<br>　　(4)＂　　　&quot;<br>　　(5)＇　　　&apos;<br>　　但是严格来说，在XML中只有”&lt;”和”&amp;”是非法的，其它三个都是可以合法存在的，但是，把它们都进行转义是一个好的习惯。<br>　　不管怎么样，转义前的字符也好，转义后的字符也好，都会被xml解析器解析，为了方便起见，使用<![CDATA[]]>来包含不被xml解析器解析的内容。但要注意的是：<br>　　(1) 此部分不能再包含”]]&gt;”；<br>　　(2) 不允许嵌套使用；<br>　　(3)”]]&gt;”这部分不能包含空格或者换行。<br>　　最后，说说<![CDATA[]]>和xml转移字符的关系，它们两个看起来是不是感觉功能重复了？<br>　　是的，它们的功能就是一样的，只是应用场景和需求有些不同：<br>　　(1)<![CDATA[]]>不能适用所有情况，转义字符可以；<br>　　(2) 对于短字符串<![CDATA[]]>写起来啰嗦，对于长字符串转义字符写起来可读性差；<br>　　(3) <![CDATA[]]>表示xml解析器忽略解析，所以更快。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;![CDATA[]]&gt;和转义字符&lt;br&gt;被&lt;![CDATA[]]&gt;这个标记所包含的内容将表示为纯文本，比如&lt;![CDATA[&lt;]]&gt;表示文本内容“&amp;lt;”。&lt;br&gt;　　此标记用于xml文档中，我们先来看看使用转义符的情况。我们知道，在xml中，”&amp;lt;”、
      
    
    </summary>
    
    
    
      <category term="xml" scheme="http://kisia.cn/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>json</title>
    <link href="http://kisia.cn/2020/07/04/json/"/>
    <id>http://kisia.cn/2020/07/04/json/</id>
    <published>2020-07-04T06:57:04.000Z</published>
    <updated>2020-07-23T05:03:26.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSON-JavaScript-Object-Notation"><a href="#JSON-JavaScript-Object-Notation" class="headerlink" title="JSON - JavaScript Object Notation"></a>JSON - JavaScript Object Notation</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>存储和交换文本信息的语法，类似XML，比XML更小、更快、更易解析</li><li>轻量级文本数据交换格式</li><li>独立于语言：使用JavaScript语法来描述数据对象，但是独立于语言和平台；<pre><code>json解析器和json库支持许多不同的编程语言，目前非常多的动态编程语言(PHP,JSP,.NET)都支持json。</code></pre></li><li>具有自我描述性，更易理解。</li></ul><h2 id="json-转换为-js-对象"><a href="#json-转换为-js-对象" class="headerlink" title="json 转换为 js 对象"></a>json 转换为 js 对象</h2><ul><li>json 文本格式在语法上与创建js对象的代码相同，因而无需解析器，js程序能够使用内建的 eval()函数，用 json 数据来生成原生的js对象。</li><li>必须把文本包围在括号中，这样才能避免语法错误：<br>实例<blockquote><p>var txt = ‘{ “sites” : [‘ +</p><pre><code>&apos;{ &quot;name&quot;:&quot;菜鸟教程&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; },&apos; +&apos;{ &quot;name&quot;:&quot;google&quot; , &quot;url&quot;:&quot;www.google.com&quot; },&apos; +&apos;{ &quot;name&quot;:&quot;微博&quot; , &quot;url&quot;:&quot;www.weibo.com&quot; } ]}&apos;;</code></pre><p>var obj = eval (“(“ + txt + “)”);</p></blockquote></li></ul><h2 id="json-amp-xml"><a href="#json-amp-xml" class="headerlink" title="json&amp;xml"></a>json&amp;xml</h2><p>相同：</p><ul><li>纯文本</li><li>具有“自我描述性”（人类可读）</li><li>具有层级结构（值中存在值）</li><li>可通过js进行解析</li><li>数据可使用AJAX进行传输<br>不同：</li><li>没有结束标签</li><li>更短</li><li>读写速度更快</li><li>能够使用内建的JavaScript eval()方法进行解析</li><li>使用数组</li><li>不适用保留字</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>json语法是js对象表示语法的子集。</p><ul><li>数据在名称/值对中</li><li>数据由逗号分开</li><li>大括号保存对象</li><li>中括号保存数据</li></ul><h3 id="1-JSON名称-值对-key-value"><a href="#1-JSON名称-值对-key-value" class="headerlink" title="1. JSON名称/值对:key/value"></a>1. JSON名称/值对:key/value</h3><ul><li>key必须是字符串，value可以是合法的JSON数据类型；</li><li>key和value中使用”:”分隔；</li><li>每个key/value对使用”,”分隔。<pre><code>格式:(&quot;name&quot;:&quot;xx&quot;)等价于js：(name = &quot;xx&quot;)</code></pre></li></ul><h3 id="2-JSON值类型"><a href="#2-JSON值类型" class="headerlink" title="2. JSON值类型"></a>2. JSON值类型</h3><ul><li>数字</li><li>字符串(双引号)</li><li>布尔值</li><li>对象(大括号)<blockquote><p>{“name”:”菜鸟教程”,”url”:”<a href="http://www.runoob.com&quot;}" target="_blank" rel="noopener">www.runoob.com&quot;}</a></p></blockquote></li><li>数组(中括号)<blockquote><p>{“sites”:[{“name”:”菜鸟教程”,”url”:”<a href="http://www.runoob.com&quot;}" target="_blank" rel="noopener">www.runoob.com&quot;}</a>,<br>{“name”:”google”,”url”:”<a href="http://www.google.com&quot;}" target="_blank" rel="noopener">www.google.com&quot;}</a>,<br>{“name”:”微博”,”url”:”<a href="http://www.weibo.com&quot;}]}">www.weibo.com&quot;}]}</a></p></blockquote></li><li>null</li></ul><h3 id="3-JSON使用案例"><a href="#3-JSON使用案例" class="headerlink" title="3. JSON使用案例"></a>3. JSON使用案例</h3><p>可以直接在js中处理json<br>var sites = [<br>    { “name”:”runoob” , “url”:”<a href="http://www.runoob.com&quot;" target="_blank" rel="noopener">www.runoob.com&quot;</a> },<br>    { “name”:”google” , “url”:”<a href="http://www.google.com&quot;" target="_blank" rel="noopener">www.google.com&quot;</a> },<br>    { “name”:”微博” , “url”:”<a href="http://www.weibo.com&quot;" target="_blank" rel="noopener">www.weibo.com&quot;</a> }<br>];<br>sites[0].name;</p><h3 id="4-访问对象值"><a href="#4-访问对象值" class="headerlink" title="4. 访问对象值"></a>4. 访问对象值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myObj, x;<br>myObj = &#123; <span class="hljs-string">"name"</span>:<span class="hljs-string">"runoob"</span>, <span class="hljs-string">"alexa"</span>:<span class="hljs-number">10000</span>, <span class="hljs-string">"site"</span>:<span class="hljs-literal">null</span> &#125;;<br><span class="hljs-comment">// 使用.</span><br>x = myObj.name;<br><span class="hljs-comment">// 使用[]</span><br>x = myObj[<span class="hljs-string">"name"</span>]<br></code></pre></td></tr></table></figure><h3 id="5-循环对象"><a href="#5-循环对象" class="headerlink" title="5. 循环对象"></a>5. 循环对象</h3><p>1）使用for-in来循环对象的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myObj = &#123; <span class="hljs-string">"name"</span>:<span class="hljs-string">"runoob"</span>, <span class="hljs-string">"alexa"</span>:<span class="hljs-number">10000</span>, <span class="hljs-string">"site"</span>:<span class="hljs-literal">null</span> &#125;;<br><span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> myObj) &#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"demo"</span>).innerHTML += x + <span class="hljs-string">"&lt;br&gt;"</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）在 for-in 循环对象的属性时，使用中括号”[]”来访问属性的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myObj = &#123; <span class="hljs-string">"name"</span>:<span class="hljs-string">"runoob"</span>, <span class="hljs-string">"alexa"</span>:<span class="hljs-number">10000</span>, <span class="hljs-string">"site"</span>:<span class="hljs-literal">null</span> &#125;;<br><span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> myObj) &#123;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"demo"</span>).innerHTML += myObj[x] + <span class="hljs-string">"&lt;br&gt;"</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-嵌套对象"><a href="#6-嵌套对象" class="headerlink" title="6. 嵌套对象"></a>6. 嵌套对象</h3><p>1）json对象中可以包含另外一个json对象<br>2）使用”.”或”[]”来访问嵌套的json对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">myObj = &#123;<br><span class="hljs-string">"name"</span>:<span class="hljs-string">"runoob"</span>,<br><span class="hljs-string">"alexa"</span>:<span class="hljs-number">10000</span>,<br><span class="hljs-string">"sites"</span>: &#123;<br><span class="hljs-string">"site1"</span>:<span class="hljs-string">"www.runoob.com"</span>,<br><span class="hljs-string">"site2"</span>:<span class="hljs-string">"m.runoob.com"</span>,<br><span class="hljs-string">"site3"</span>:<span class="hljs-string">"c.runoob.com"</span><br>&#125;<br>&#125;<br>x = myObj.sites.site1;<br><span class="hljs-comment">// 或者</span><br>x = myObj.sites[<span class="hljs-string">"site1"</span>];<br></code></pre></td></tr></table></figure><h3 id="7-删除对象属性"><a href="#7-删除对象属性" class="headerlink" title="7. 删除对象属性"></a>7. 删除对象属性</h3><p>1）使用delete关键字<br>2）删除一对key/value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">delete</span> myObj.sites.site1;<br></code></pre></td></tr></table></figure><h3 id="8-数组作为json对象"><a href="#8-数组作为json对象" class="headerlink" title="8. 数组作为json对象"></a>8. 数组作为json对象</h3><p>1）json 数组在中括号中书写<br>2）json 中数组值必须是合法的 json 数据类型<br>注：js 中，数组值可以是 json 数据类型，也可以是 js 的表达式，包括函数，日期及undefined。<br>3）使用delete关键字删除数组元素，删除之后位置保留，即数组长度不变</p><h3 id="9-其他"><a href="#9-其他" class="headerlink" title="9. 其他"></a>9. 其他</h3><p>JSON.parse()<br>1）json 通常用于与服务端交换数据<br>2）在接收服务器数据时一般是字符串，可以使用JSON.parse()方法将数据转换为js对象。<br>3）语法：<br>JSON.parse(text[,reviver])</p><p>参数说明：<br>text: 必须，一个有效的JSON字符串。<br>reviver: 可选，一个转换结果的函数，将为对象的每个成员调用此函数。</p><p>JSON.stringify()<br>1）向服务器发送数据时一般是字符串，使用JSON.stringify()方法将js对象转换为字符串<br>2）语法：<br>JSON.stringify(value[,replacer[,space]])</p><p>参数说明：<br>        value: 必需，一个有效的JSON字符串。<br>        replacer: 可选，用于转换结果的函数或数组。如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：””。<br>        如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。<br>        space: 可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 有可以使用非数字，如：\t。<br>实例:<br>var obj = { “name”:”runoob”, “alexa”:10000, “site”:”<a href="http://www.runoob.com&quot;}" target="_blank" rel="noopener">www.runoob.com&quot;}</a>;<br>var myJSON = JSON.stringify(obj);<br>document.getElementById(“demo”).innerHTML = myJSON;</p><p>3）JSON 不允许包含函数，JSON.stringify() 会删除 JavaScript 对象的函数，包括 key 和 value。<br>可以在执行 JSON.stringify() 函数前将函数转换为字符串来避免以上问题的发生：<br>实例：<br>var obj = { “name”:”Runoob”, “alexa”:function () {return 10000;}, “site”:”<a href="http://www.runoob.com&quot;}" target="_blank" rel="noopener">www.runoob.com&quot;}</a>;<br>obj.alexa = obj.alexa.toString();<br>var myJSON = JSON.stringify(obj);<br>document.getElementById(“demo”).innerHTML = myJSON;</p><h2 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h2><p>1）json 文件的文件类型是 “.json”<br>2）json 文本的MIME类型是 “application/json”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JSON-JavaScript-Object-Notation&quot;&gt;&lt;a href=&quot;#JSON-JavaScript-Object-Notation&quot; class=&quot;headerlink&quot; title=&quot;JSON - JavaScript Object Notat
      
    
    </summary>
    
    
    
      <category term="json" scheme="http://kisia.cn/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>activeMQ</title>
    <link href="http://kisia.cn/2020/07/04/activeMQ/"/>
    <id>http://kisia.cn/2020/07/04/activeMQ/</id>
    <published>2020-07-04T06:52:09.000Z</published>
    <updated>2020-07-23T04:57:46.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>默认账号密码 admin/admin</p><h3 id="docker方式"><a href="#docker方式" class="headerlink" title="docker方式"></a>docker方式</h3><p>61616是activemq的容器使用端口（映射为6161），8161是web页面管理端口（对外映射为8162）</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name myactivemq -p 6161:61616 -p 8162:8161 docker.io/webcenter/activemq:latest<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;默认账号密码 admin/admin&lt;/p&gt;
&lt;h3 id=&quot;docker方式&quot;&gt;&lt;a href=&quot;#docker方式&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="mq" scheme="http://kisia.cn/tags/mq/"/>
    
      <category term="activemq" scheme="http://kisia.cn/tags/activemq/"/>
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="http://kisia.cn/2020/07/03/maven/"/>
    <id>http://kisia.cn/2020/07/03/maven/</id>
    <published>2020-07-03T10:20:24.000Z</published>
    <updated>2020-07-23T05:04:07.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="打包跳过测试"><a href="#打包跳过测试" class="headerlink" title="打包跳过测试"></a>打包跳过测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Dmaven.test.skip=true<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;打包跳过测试&quot;&gt;&lt;a href=&quot;#打包跳过测试&quot; class=&quot;headerlink&quot; title=&quot;打包跳过测试&quot;&gt;&lt;/a&gt;打包跳过测试&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
    
      <category term="maven" scheme="http://kisia.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://kisia.cn/2020/07/03/docker/"/>
    <id>http://kisia.cn/2020/07/03/docker/</id>
    <published>2020-07-03T05:38:09.000Z</published>
    <updated>2020-07-23T04:59:59.464Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进入docker"><a href="#进入docker" class="headerlink" title="进入docker"></a>进入docker</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it [containerID] /bin/bash<br>exit<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;进入docker&quot;&gt;&lt;a href=&quot;#进入docker&quot; class=&quot;headerlink&quot; title=&quot;进入docker&quot;&gt;&lt;/a&gt;进入docker&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;figcaption&gt;&lt;span
      
    
    </summary>
    
    
    
      <category term="docker" scheme="http://kisia.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch</title>
    <link href="http://kisia.cn/2020/07/02/elasticsearch/"/>
    <id>http://kisia.cn/2020/07/02/elasticsearch/</id>
    <published>2020-07-02T12:45:07.000Z</published>
    <updated>2020-07-23T05:01:02.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启动-elasticsearch"><a href="#启动-elasticsearch" class="headerlink" title="启动 elasticsearch"></a>启动 elasticsearch</h2><p>docker 方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name es -d -p 9200:9200 -e "ES_JAVA_OPTS=-Xms256m -Xmx256m" -e "discovery.type=single-node" elasticsearch:6.5.0<br></code></pre></td></tr></table></figure><h2 id="使用-elasticsearch-head-连接-elasticsearch"><a href="#使用-elasticsearch-head-连接-elasticsearch" class="headerlink" title="使用 elasticsearch-head 连接 elasticsearch"></a>使用 elasticsearch-head 连接 elasticsearch</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol><li>git 工程<br><a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elasticsearch-head</a></li><li>使用docker<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mobz/elasticsearch-head:5<br>docker run -d -p 9100:9100 docker.io/mobz/elasticsearch-head:5<br></code></pre></td></tr></table></figure><h3 id="elasticsearch-中修改-config-slasticsearch-yml"><a href="#elasticsearch-中修改-config-slasticsearch-yml" class="headerlink" title="elasticsearch 中修改 config/slasticsearch.yml"></a>elasticsearch 中修改 config/slasticsearch.yml</h3></li></ol><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> allow origin 设置允许跨域</span><br>http.cors.enabled: true<br>http.cors.allow-origin: "*"<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>访问 ip:9100<br>在其中输入 es 地址即可使用</p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="查看-index-下数据"><a href="#查看-index-下数据" class="headerlink" title="查看 index 下数据"></a>查看 index 下数据</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://192.168.51.86:9200/jingqing_table_index/_search?pretty<br></code></pre></td></tr></table></figure><h2 id="使用kibana"><a href="#使用kibana" class="headerlink" title="使用kibana"></a>使用kibana</h2><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>docker方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name kibana -e ELASTICSEARCH_URL=http://172.16.0.9:9200 -p 5601:5601 -d kibana:6.5.0<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;启动-elasticsearch&quot;&gt;&lt;a href=&quot;#启动-elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;启动 elasticsearch&quot;&gt;&lt;/a&gt;启动 elasticsearch&lt;/h2&gt;&lt;p&gt;docker 方式&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="es" scheme="http://kisia.cn/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>base64 coding principle</title>
    <link href="http://kisia.cn/2020/06/26/base64/"/>
    <id>http://kisia.cn/2020/06/26/base64/</id>
    <published>2020-06-26T03:09:52.000Z</published>
    <updated>2020-07-23T05:12:57.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><p><code>base64</code> has become common 8-bit code in the network.<br>It appears because of the spread of the internet.</p><blockquote><p>It works when transmit English, but it will display as gibberish when use Chinese and some other language.</p></blockquote><h2 id="principle"><a href="#principle" class="headerlink" title="principle"></a>principle</h2><p><code>base64</code> use <code>A-Za-z0-9+/</code> as index table, and <code>=</code> as fill character.</p><h3 id="convert-steps"><a href="#convert-steps" class="headerlink" title="convert steps"></a>convert steps</h3><ul><li>transform the character string to 3 bytes arrays, 8 bits per byte, 24 bits totally.</li><li>regroup 3 arrays to 4 arrays, 6 bits per array.</li><li>add <code>00</code> before each array, so that 3 bytes change to 4 bytes.</li><li>get base64 from the base64 index table.<table><thead><tr><th align="center">binary</th><th align="center">base64</th><th align="center">binary</th><th align="center">base64</th><th align="center">binary</th><th align="center">base64</th><th align="center">binary</th><th align="center">base64</th></tr></thead><tbody><tr><td align="center">00000000</td><td align="center">A</td><td align="center">00010000</td><td align="center">Q</td><td align="center">00100000</td><td align="center">g</td><td align="center">00110000</td><td align="center">w</td></tr><tr><td align="center">00000001</td><td align="center">B</td><td align="center">00010001</td><td align="center">R</td><td align="center">00100001</td><td align="center">h</td><td align="center">00110001</td><td align="center">x</td></tr><tr><td align="center">00000010</td><td align="center">C</td><td align="center">00010010</td><td align="center">S</td><td align="center">00100010</td><td align="center">i</td><td align="center">00110010</td><td align="center">y</td></tr><tr><td align="center">00000011</td><td align="center">D</td><td align="center">00010011</td><td align="center">T</td><td align="center">00100011</td><td align="center">j</td><td align="center">00110011</td><td align="center">z</td></tr><tr><td align="center">00000100</td><td align="center">E</td><td align="center">00010100</td><td align="center">U</td><td align="center">00100100</td><td align="center">k</td><td align="center">00110100</td><td align="center">0</td></tr><tr><td align="center">00000101</td><td align="center">F</td><td align="center">00010101</td><td align="center">V</td><td align="center">00100101</td><td align="center">l</td><td align="center">00110101</td><td align="center">1</td></tr><tr><td align="center">00000110</td><td align="center">G</td><td align="center">00010110</td><td align="center">W</td><td align="center">00100110</td><td align="center">m</td><td align="center">00110110</td><td align="center">2</td></tr><tr><td align="center">00000111</td><td align="center">H</td><td align="center">00010111</td><td align="center">X</td><td align="center">00100111</td><td align="center">n</td><td align="center">00110111</td><td align="center">3</td></tr><tr><td align="center">00001000</td><td align="center">I</td><td align="center">00011000</td><td align="center">Y</td><td align="center">00101000</td><td align="center">o</td><td align="center">00111000</td><td align="center">4</td></tr><tr><td align="center">00001001</td><td align="center">J</td><td align="center">00011001</td><td align="center">Z</td><td align="center">00101001</td><td align="center">p</td><td align="center">00111001</td><td align="center">5</td></tr><tr><td align="center">00001010</td><td align="center">K</td><td align="center">00011010</td><td align="center">a</td><td align="center">00101010</td><td align="center">q</td><td align="center">00111010</td><td align="center">6</td></tr><tr><td align="center">00001011</td><td align="center">L</td><td align="center">00011011</td><td align="center">b</td><td align="center">00101011</td><td align="center">r</td><td align="center">00111011</td><td align="center">7</td></tr><tr><td align="center">00001100</td><td align="center">M</td><td align="center">00011100</td><td align="center">c</td><td align="center">00101100</td><td align="center">s</td><td align="center">00111100</td><td align="center">8</td></tr><tr><td align="center">00001101</td><td align="center">N</td><td align="center">00011101</td><td align="center">d</td><td align="center">00101101</td><td align="center">t</td><td align="center">00111101</td><td align="center">9</td></tr><tr><td align="center">00001110</td><td align="center">O</td><td align="center">00011110</td><td align="center">e</td><td align="center">00101110</td><td align="center">u</td><td align="center">00111110</td><td align="center">+</td></tr><tr><td align="center">00001111</td><td align="center">P</td><td align="center">00011111</td><td align="center">f</td><td align="center">00101111</td><td align="center">v</td><td align="center">00111111</td><td align="center">/</td></tr></tbody></table></li></ul><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><h3 id="Man"><a href="#Man" class="headerlink" title="Man"></a><code>Man</code></h3><p>ASSII: M - 77, a - 97, n - 110<br>binary: M - 01001101, a - 01100001, n - 01101110<br>regroup: 00010011, 00010110, 00000101, 00101110<br>base64: T, W, F, u</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a><code>A</code></h3><p>ASSII: A - 65<br>binary: A - 01000001<br>regroup: 00010000, 00010000<br>base64: Q, Q, =, = </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;background&quot;&gt;&lt;a href=&quot;#background&quot; class=&quot;headerlink&quot; title=&quot;background&quot;&gt;&lt;/a&gt;background&lt;/h2&gt;&lt;p&gt;&lt;code&gt;base64&lt;/code&gt; has become common 
      
    
    </summary>
    
    
    
      <category term="base64" scheme="http://kisia.cn/tags/base64/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://kisia.cn/2020/06/21/linux/"/>
    <id>http://kisia.cn/2020/06/21/linux/</id>
    <published>2020-06-21T05:55:08.000Z</published>
    <updated>2020-07-23T02:58:44.154Z</updated>
    
    <content type="html"><![CDATA[<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>history [n] 查看最近 n 个命令<br>history [-c] 清除所有 history 内容<br>history [-raw] histfiles<br>-r 将 histfiles 的内容读到当前 history 中<br>-a 将目前新增的 history 指令新增到 histfiles 中，若没有加 histfiles，则写入 ~/.bash_history<br>-w 将目前 history 内容写入 histfiles</p><blockquote><p>linux 系统当你在 shell(控制台) 中输入并执行命令时，会自动把你的命令记录到历史列表中，一般保存在用户目录下的.bash_history中，默认保存1000条(可修改)</p></blockquote><h4 id="运行特定的历史命令"><a href="#运行特定的历史命令" class="headerlink" title="运行特定的历史命令"></a>运行特定的历史命令</h4><p>[!number] [!command] [!!]<br>number 第 number 个指令<br>command 指令的开头 command 个字母<br>! 上一个指令</p><h3 id="gt-amp-gt-gt"><a href="#gt-amp-gt-gt" class="headerlink" title="&gt; &amp; &gt;&gt;"></a><code>&gt;</code> &amp; <code>&gt;&gt;</code></h3><p><code>&gt;</code> is used to override file, if file not exist, it will auto create. actually it creates a file every time and then replace the origin file.<br><code>&gt;&gt;</code> is used to append th file.</p><ul><li>清空内容 <code>&gt;test.sh</code></li></ul><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a><code>sed</code></h3><p><code>sed</code> is used to handle txt.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed [-hnV] [-e&lt;script&gt;] [-f&lt;script&gt;] [txt]<br></code></pre></td></tr></table></figure><ul><li>modify <code>sed -i &#39;s/jingqing-mt-[a-z]:/jingqing-mt:/g&#39; /data/operations/dockertars/jingqing-mt-st.k8s.yaml</code></li><li><strong>sed中使用变量时，需要把<code>&#39;</code>改为<code>&quot;</code></strong></li></ul><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">if [command]<br>then<br>    script<br>elif [command]<br>    script<br>else<br>    script<br>fi<br></code></pre></td></tr></table></figure><h4 id="判断字符串是否为空"><a href="#判断字符串是否为空" class="headerlink" title="判断字符串是否为空"></a>判断字符串是否为空</h4><p><code>&quot;&quot;</code> 是必须的</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>STRING=<br>if [ -z "$STRING" ]; then<br>    echo "STRING is empty"<br>fi<br>if [ -n "$STRING" ]; then<br>    echo "STRING is not empty"<br>fi<br></code></pre></td></tr></table></figure><h4 id="file-category-exist"><a href="#file-category-exist" class="headerlink" title="file/category exist"></a>file/category exist</h4><p>[]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;history&quot;&gt;&lt;a href=&quot;#history&quot; class=&quot;headerlink&quot; title=&quot;history&quot;&gt;&lt;/a&gt;history&lt;/h3&gt;&lt;p&gt;history [n] 查看最近 n 个命令&lt;br&gt;history [-c] 清除所有 histor
      
    
    </summary>
    
    
    
      <category term="shell" scheme="http://kisia.cn/tags/shell/"/>
    
      <category term="linux" scheme="http://kisia.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>expect</title>
    <link href="http://kisia.cn/2020/06/20/expect/"/>
    <id>http://kisia.cn/2020/06/20/expect/</id>
    <published>2020-06-20T09:18:51.000Z</published>
    <updated>2020-06-21T06:27:39.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><p>use <code>expect</code> to realize the auto interactivity.</p><h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>yum install -y expect</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>expect -c "<br>  spawn scp -P [port] root@[host]:[path] [local-path]<br>  expect &#123;<br>    \"*password*\" &#123;set timeout 300;send \"password\r\";exp_continue;&#125;<br>    \"*yes*\" &#123;send \"yes\r\";exp_continue;&#125;<br>  &#125;<br>"<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;background&quot;&gt;&lt;a href=&quot;#background&quot; class=&quot;headerlink&quot; title=&quot;background&quot;&gt;&lt;/a&gt;background&lt;/h2&gt;&lt;p&gt;use &lt;code&gt;expect&lt;/code&gt; to realize the
      
    
    </summary>
    
    
    
      <category term="shell" scheme="http://kisia.cn/tags/shell/"/>
    
      <category term="expect" scheme="http://kisia.cn/tags/expect/"/>
    
  </entry>
  
  <entry>
    <title>springboot</title>
    <link href="http://kisia.cn/2020/06/20/springboot/"/>
    <id>http://kisia.cn/2020/06/20/springboot/</id>
    <published>2020-06-20T09:11:12.000Z</published>
    <updated>2020-07-23T05:14:32.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="set-upload-file-limit"><a href="#set-upload-file-limit" class="headerlink" title="set upload file limit"></a>set upload file limit</h3><p>default value is 1MB</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">30MB</span><br><span class="hljs-meta">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">30MB</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;set-upload-file-limit&quot;&gt;&lt;a href=&quot;#set-upload-file-limit&quot; class=&quot;headerlink&quot; title=&quot;set upload file limit&quot;&gt;&lt;/a&gt;set upload file limit&lt;/
      
    
    </summary>
    
    
    
      <category term="springboot" scheme="http://kisia.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="http://kisia.cn/2020/06/19/spring/"/>
    <id>http://kisia.cn/2020/06/19/spring/</id>
    <published>2020-06-19T01:16:16.000Z</published>
    <updated>2020-06-19T01:45:16.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="common-interface"><a href="#common-interface" class="headerlink" title="common interface"></a>common interface</h2><h3 id="InitializingBean"><a href="#InitializingBean" class="headerlink" title="InitializingBean"></a>InitializingBean</h3><p>provide init method for a bean, implements <code>afterPropertiesSet</code> method.<br>we can also set <code>init-method</code> in <code>setting.properties</code>, it’s using reflect to realize.<br>implements <code>InitializingBean</code> is more efficient while using setting file removes the dependence of spring.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;common-interface&quot;&gt;&lt;a href=&quot;#common-interface&quot; class=&quot;headerlink&quot; title=&quot;common interface&quot;&gt;&lt;/a&gt;common interface&lt;/h2&gt;&lt;h3 id=&quot;Initializ
      
    
    </summary>
    
    
    
      <category term="spring" scheme="http://kisia.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>tryWithResource</title>
    <link href="http://kisia.cn/2020/06/18/tryWithResource/"/>
    <id>http://kisia.cn/2020/06/18/tryWithResource/</id>
    <published>2020-06-18T06:11:26.000Z</published>
    <updated>2020-06-18T08:10:18.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h2><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><p>we should close resource after we use it, but it’s repeat and ugly code.</p><p>we can use try-with-resource after jdk7.</p><h3 id="traditional-way"><a href="#traditional-way" class="headerlink" title="traditional way"></a>traditional way</h3><p>use finally</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    FileInputStream inputStream = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        inputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"test"</span>));<br>        System.out.println(inputStream.read());<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e.getMessage(), e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                inputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e.getMessage(), e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="try-with-resouce"><a href="#try-with-resouce" class="headerlink" title="try-with-resouce"></a>try-with-resouce</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> (FileInputStream inputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">"test"</span>))) &#123;<br>        System.out.println(inputStream.read());<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e.getMessage(), e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>it works while objects declared in <code>()</code> implements <code>Closable</code> or <code>AutoClosable</code></p><h3 id="principle"><a href="#principle" class="headerlink" title="principle"></a>principle</h3><p>it’s not a new function but a <strong>Syntactic sugar</strong> (语法糖). In fact, it’s still same as before, we can find it in <code>class</code> file.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;try-with-resource&quot;&gt;&lt;a href=&quot;#try-with-resource&quot; class=&quot;headerlink&quot; title=&quot;try-with-resource&quot;&gt;&lt;/a&gt;try-with-resource&lt;/h2&gt;&lt;h3 id=&quot;backg
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://kisia.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>springboot-annotation</title>
    <link href="http://kisia.cn/2020/06/14/springboot-annotation/"/>
    <id>http://kisia.cn/2020/06/14/springboot-annotation/</id>
    <published>2020-06-14T02:37:55.000Z</published>
    <updated>2020-06-19T01:15:23.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h3><p>define value in application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">image.type=png,jpg,gif</span><br></code></pre></td></tr></table></figure><p>use it as <code>String</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;image.type&#125;"</span>)<br>String imageType;<span class="hljs-comment">// "png,jpg,gif"</span><br></code></pre></td></tr></table></figure><p>use it as <code>List&lt;String&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value</span>(<span class="hljs-string">"#&#123;'$&#123;image.type&#125;'.split(',')&#125;"</span>)<br>List&lt;String&gt; imageTypes;<span class="hljs-comment">// "png", "jpg", "gif"</span><br></code></pre></td></tr></table></figure><p><strong>attention:</strong> use set method when binding to a static property, set method should not be <code>static</code><br>remember to give it to spring by using <code>@Component</code> or others</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> List&lt;String&gt; imageTypes;<br><span class="hljs-meta">@Value</span>(<span class="hljs-string">"#&#123;'$&#123;image.type&#125;'.split(',')&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setImageTypes</span><span class="hljs-params">(List&lt;String&gt; list)</span> </span>&#123;<br>    imageTypes = list;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Value&quot;&gt;&lt;a href=&quot;#Value&quot; class=&quot;headerlink&quot; title=&quot;Value&quot;&gt;&lt;/a&gt;Value&lt;/h3&gt;&lt;p&gt;define value in application.yml&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
    
      <category term="springboot" scheme="http://kisia.cn/tags/springboot/"/>
    
      <category term="annotation" scheme="http://kisia.cn/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>yml</title>
    <link href="http://kisia.cn/2020/06/11/yml/"/>
    <id>http://kisia.cn/2020/06/11/yml/</id>
    <published>2020-06-11T15:23:11.000Z</published>
    <updated>2020-06-18T06:53:13.341Z</updated>
    
    <content type="html"><![CDATA[<h3 id="array-declare"><a href="#array-declare" class="headerlink" title="array declare"></a>array declare</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">knowledgeTitles:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kdTitle:</span> <span class="hljs-string">听不清</span><br>    <span class="hljs-attr">keyWords:</span> <span class="hljs-string">"[你说什么，没听清，听不清楚，再说一遍]"</span><br>    <span class="hljs-attr">question:</span> <span class="hljs-string">"[没听懂，听不清楚]"</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kdTitle:</span> <span class="hljs-string">无应答</span><br>    <span class="hljs-attr">kdInfos:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">你好</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hello</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hi</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;array-declare&quot;&gt;&lt;a href=&quot;#array-declare&quot; class=&quot;headerlink&quot; title=&quot;array declare&quot;&gt;&lt;/a&gt;array declare&lt;/h3&gt;&lt;figure class=&quot;highlight yaml
      
    
    </summary>
    
    
    
      <category term="yml" scheme="http://kisia.cn/tags/yml/"/>
    
  </entry>
  
  <entry>
    <title>stream</title>
    <link href="http://kisia.cn/2020/06/09/stream/"/>
    <id>http://kisia.cn/2020/06/09/stream/</id>
    <published>2020-06-09T15:24:52.000Z</published>
    <updated>2020-06-30T11:33:21.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="list-to-map"><a href="#list-to-map" class="headerlink" title="list to map"></a>list to map</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// before</span><br>Map&lt;String, List&lt;AutoTemplateParamInstant&gt;&gt; instanceIdTemplateParamInstantsMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>ListUtil.nvlList(autoMapper.queryAutoTemplateParamInstantByIds(instanceIdList)).stream().forEach(autoTemplateParamInstant -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (instanceIdTemplateParamInstantsMap.containsKey(autoTemplateParamInstant.getInstanceId())) &#123;<br>        instanceIdTemplateParamInstantsMap.get(autoTemplateParamInstant.getInstanceId()).add(autoTemplateParamInstant);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        instanceIdTemplateParamInstantsMap.put(autoTemplateParamInstant.getInstanceId(), ListUtil.asList(autoTemplateParamInstant));<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// after</span><br>Map&lt;String, List&lt;AutoTemplateParamInstant&gt;&gt; instanceIdTemplateParamInstantsMap = ListUtil.nvlList(autoMapper.queryAutoTemplateParamInstantByIds(instanceIdList))<br>    .stream().collect(Collectors.toMap(AutoTemplateParamInstant::getInstanceId, autoTemplateParamInstant -&gt; ListUtil.asList(autoTemplateParamInstant),<br>        ListUtil::mergeList));<br><span class="hljs-comment">// util</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, U&gt; Map&lt;String, List&lt;U&gt;&gt; list2Map(List&lt;T&gt; list, Function&lt;? <span class="hljs-keyword">super</span> T, String&gt; keyMapper,<br>                                                Function&lt;? <span class="hljs-keyword">super</span> T, ? extends List&lt;U&gt;&gt; valueMapper) &#123;<br>    <span class="hljs-keyword">return</span> nvlList(list).stream().collect(Collectors.toMap(keyMapper, valueMapper, ListUtil::mergeList));<br>&#125;<br><span class="hljs-comment">// use util</span><br>Map&lt;String, List&lt;AutoInstanceTemplatePosShow&gt;&gt; posShowAllMap = ListUtil.list2Map(autoMapper.queryPosShowByTemplateIds(templateIdList),<br>        AutoInstanceTemplatePosShow::getTemplateId, ListUtil::asList);<br>Map&lt;String, List&lt;String&gt;&gt; posShowMap = ListUtil.list2Map(autoMapper.queryPosShowByInstanceIds(instanceIdList),<br>        AutoInstanceTemplatePosShow::getInstanceId, posShow -&gt; ListUtil.asList(posShow.getPosTemplateId()));<br></code></pre></td></tr></table></figure><h3 id="map-to-list"><a href="#map-to-list" class="headerlink" title="map to list"></a>map to list</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.values().stream().collect(Collectors.toList());<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;list-to-map&quot;&gt;&lt;a href=&quot;#list-to-map&quot; class=&quot;headerlink&quot; title=&quot;list to map&quot;&gt;&lt;/a&gt;list to map&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table
      
    
    </summary>
    
    
    
      <category term="java" scheme="http://kisia.cn/tags/java/"/>
    
      <category term="lambda" scheme="http://kisia.cn/tags/lambda/"/>
    
      <category term="resource" scheme="http://kisia.cn/tags/resource/"/>
    
  </entry>
  
</feed>
